'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SchedulerCars")>  _
Partial Public Class SchedulingDataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertDBAppointment(instance As DBAppointment)
    End Sub
  Partial Private Sub UpdateDBAppointment(instance As DBAppointment)
    End Sub
  Partial Private Sub DeleteDBAppointment(instance As DBAppointment)
    End Sub
  Partial Private Sub InsertDBResource(instance As DBResource)
    End Sub
  Partial Private Sub UpdateDBResource(instance As DBResource)
    End Sub
  Partial Private Sub DeleteDBResource(instance As DBResource)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SchedulerCarsConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property DBAppointments() As System.Data.Linq.Table(Of DBAppointment)
		Get
			Return Me.GetTable(Of DBAppointment)
		End Get
	End Property
	
	Public ReadOnly Property DBResources() As System.Data.Linq.Table(Of DBResource)
		Get
			Return Me.GetTable(Of DBResource)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DBAppointments")>  _
Partial Public Class DBAppointment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UniqueID As Integer
	
	Private _Type As System.Nullable(Of Integer)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _AllDay As System.Nullable(Of Boolean)
	
	Private _Subject As String
	
	Private _Location As String
	
	Private _Description As String
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _Label As System.Nullable(Of Integer)
	
	Private _ResourceID As System.Nullable(Of Integer)
	
	Private _ReminderInfo As String
	
	Private _RecurrenceInfo As String
	
	Private _CustomField1 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnAllDayChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAllDayChanged()
    End Sub
    Partial Private Sub OnSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnSubjectChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnLabelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLabelChanged()
    End Sub
    Partial Private Sub OnResourceIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnResourceIDChanged()
    End Sub
    Partial Private Sub OnReminderInfoChanging(value As String)
    End Sub
    Partial Private Sub OnReminderInfoChanged()
    End Sub
    Partial Private Sub OnRecurrenceInfoChanging(value As String)
    End Sub
    Partial Private Sub OnRecurrenceInfoChanged()
    End Sub
    Partial Private Sub OnCustomField1Changing(value As String)
    End Sub
    Partial Private Sub OnCustomField1Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UniqueID() As Integer
		Get
			Return Me._UniqueID
		End Get
		Set
			If ((Me._UniqueID = value)  _
						= false) Then
				Me.OnUniqueIDChanging(value)
				Me.SendPropertyChanging
				Me._UniqueID = value
				Me.SendPropertyChanged("UniqueID")
				Me.OnUniqueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="Int")>  _
	Public Property Type() As System.Nullable(Of Integer)
		Get
			Return Me._Type
		End Get
		Set
			If (Me._Type.Equals(value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="SmallDateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="SmallDateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllDay", DbType:="Bit")>  _
	Public Property AllDay() As System.Nullable(Of Boolean)
		Get
			Return Me._AllDay
		End Get
		Set
			If (Me._AllDay.Equals(value) = false) Then
				Me.OnAllDayChanging(value)
				Me.SendPropertyChanging
				Me._AllDay = value
				Me.SendPropertyChanged("AllDay")
				Me.OnAllDayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject", DbType:="NVarChar(100)")>  _
	Public Property Subject() As String
		Get
			Return Me._Subject
		End Get
		Set
			If (String.Equals(Me._Subject, value) = false) Then
				Me.OnSubjectChanging(value)
				Me.SendPropertyChanging
				Me._Subject = value
				Me.SendPropertyChanged("Subject")
				Me.OnSubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(50)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Label", DbType:="Int")>  _
	Public Property Label() As System.Nullable(Of Integer)
		Get
			Return Me._Label
		End Get
		Set
			If (Me._Label.Equals(value) = false) Then
				Me.OnLabelChanging(value)
				Me.SendPropertyChanging
				Me._Label = value
				Me.SendPropertyChanged("Label")
				Me.OnLabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResourceID", DbType:="Int")>  _
	Public Property ResourceID() As System.Nullable(Of Integer)
		Get
			Return Me._ResourceID
		End Get
		Set
			If (Me._ResourceID.Equals(value) = false) Then
				Me.OnResourceIDChanging(value)
				Me.SendPropertyChanging
				Me._ResourceID = value
				Me.SendPropertyChanged("ResourceID")
				Me.OnResourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReminderInfo", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReminderInfo() As String
		Get
			Return Me._ReminderInfo
		End Get
		Set
			If (String.Equals(Me._ReminderInfo, value) = false) Then
				Me.OnReminderInfoChanging(value)
				Me.SendPropertyChanging
				Me._ReminderInfo = value
				Me.SendPropertyChanged("ReminderInfo")
				Me.OnReminderInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecurrenceInfo", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RecurrenceInfo() As String
		Get
			Return Me._RecurrenceInfo
		End Get
		Set
			If (String.Equals(Me._RecurrenceInfo, value) = false) Then
				Me.OnRecurrenceInfoChanging(value)
				Me.SendPropertyChanging
				Me._RecurrenceInfo = value
				Me.SendPropertyChanged("RecurrenceInfo")
				Me.OnRecurrenceInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomField1", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CustomField1() As String
		Get
			Return Me._CustomField1
		End Get
		Set
			If (String.Equals(Me._CustomField1, value) = false) Then
				Me.OnCustomField1Changing(value)
				Me.SendPropertyChanging
				Me._CustomField1 = value
				Me.SendPropertyChanged("CustomField1")
				Me.OnCustomField1Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DBResources")>  _
Partial Public Class DBResource
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UniqueID As Integer
	
	Private _ResourceID As Integer
	
	Private _ResourceName As String
	
	Private _Color As System.Nullable(Of Integer)
	
	Private _Image As System.Data.Linq.Binary
	
	Private _CustomField1 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnResourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnResourceIDChanged()
    End Sub
    Partial Private Sub OnResourceNameChanging(value As String)
    End Sub
    Partial Private Sub OnResourceNameChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnCustomField1Changing(value As String)
    End Sub
    Partial Private Sub OnCustomField1Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UniqueID() As Integer
		Get
			Return Me._UniqueID
		End Get
		Set
			If ((Me._UniqueID = value)  _
						= false) Then
				Me.OnUniqueIDChanging(value)
				Me.SendPropertyChanging
				Me._UniqueID = value
				Me.SendPropertyChanged("UniqueID")
				Me.OnUniqueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResourceID", DbType:="Int NOT NULL")>  _
	Public Property ResourceID() As Integer
		Get
			Return Me._ResourceID
		End Get
		Set
			If ((Me._ResourceID = value)  _
						= false) Then
				Me.OnResourceIDChanging(value)
				Me.SendPropertyChanging
				Me._ResourceID = value
				Me.SendPropertyChanged("ResourceID")
				Me.OnResourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResourceName", DbType:="NVarChar(50)")>  _
	Public Property ResourceName() As String
		Get
			Return Me._ResourceName
		End Get
		Set
			If (String.Equals(Me._ResourceName, value) = false) Then
				Me.OnResourceNameChanging(value)
				Me.SendPropertyChanging
				Me._ResourceName = value
				Me.SendPropertyChanged("ResourceName")
				Me.OnResourceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="Int")>  _
	Public Property Color() As System.Nullable(Of Integer)
		Get
			Return Me._Color
		End Get
		Set
			If (Me._Color.Equals(value) = false) Then
				Me.OnColorChanging(value)
				Me.SendPropertyChanging
				Me._Color = value
				Me.SendPropertyChanged("Color")
				Me.OnColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Image() As System.Data.Linq.Binary
		Get
			Return Me._Image
		End Get
		Set
			If (Object.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomField1", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CustomField1() As String
		Get
			Return Me._CustomField1
		End Get
		Set
			If (String.Equals(Me._CustomField1, value) = false) Then
				Me.OnCustomField1Changing(value)
				Me.SendPropertyChanging
				Me._CustomField1 = value
				Me.SendPropertyChanged("CustomField1")
				Me.OnCustomField1Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
